import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

plt.style.use('fivethirtyeight')
weights= np.array([0.25,0.25,0.25,0.25])

assets = ['AMD', 'NFLX', 'AAPL', 'GOOG']
weights = np.array([0.25, 0.25, 0.25, 0.25])
stockStartDate = '2015-01-01'
today = pd.Timestamp.today().strftime('%Y-%m-%d')

df=pd.DataFrame()
for stock in assets:
    data = yf.download(stock, start=stockStartDate, end=today)
    df[stock] = data['Adj Close']
df

title='Protfolio Adj. Close Price History'
my_stocks=df
#creating and plotting the graph 
for c in my_stocks.columns.values:
    plt.plot(my_stocks[c],label=c)
    
plt.title(title)
plt.xlabel('Date',fontsize=18)
plt.ylabel('Adj,Price',fontsize=18)
plt.legend(my_stocks.columns.values,loc='upper left')
plt.show()

returns= df.pct_change()
returns

cov_matrix_annual= returns.cov()*252
cov_matrix_annual

#calculating the portfolio variance
port_variance=np.dot(weights.T,np.dot(cov_matrix_annual,weights))
port_variance

#calculating the portfolio volatility aka SD
port_volatility=np.sqrt(port_variance)
port_volatility

#calculating entire portfolio return 
portfolio_simple_annual_returns=np.sum(returns.mean()*weights)*252
portfolio_simple_annual_returns

percent_var=str(round(port_variance,2)*100)+'%'
percent_vola=str(round(port_volatility,2)*100)+'%'
percent_ret=str(round(portfolio_simple_annual_returns,2)*100)+'%'
print('Expected Annual Return: '+percent_ret)
print(' Annual Volatility: '+percent_vola)
print('Annual Variance: '+percent_var)

from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns
from pypfopt import plotting

mu=expected_returns.mean_historical_return(df)
S=risk_models.sample_cov(df)

ef=EfficientFrontier(mu,S,weight_bounds=(None,None))
ef.add_constraint(lambda w: w[0]+w[1]+w[2]+w[3]==1)
weights=ef.max_sharpe()
cleaned_weights=ef.clean_weights()
print(cleaned_weights)
ef.portfolio_performance(verbose=True)

from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices
latest_prices= get_latest_prices(df)
weights=cleaned_weights
da=DiscreteAllocation(weights,latest_prices,total_portfolio_value=50000)

allocation,leftover=da.lp_portfolio()
print('Discrete Allocation:', allocation)
print('Funds remaining : ${:.2f}'.format(leftover))

mu = expected_returns.mean_historical_return(df)
S = risk_models.sample_cov(df)

ef = EfficientFrontier(mu, S, weight_bounds=(None, None))
ef.add_constraint(lambda w: w[0] + w[1] + w[2] + w[3] == 1)
plotting.plot_efficient_frontier(ef)

# Create a new instance of EfficientFrontier before calling max_sharpe()
new_ef = EfficientFrontier(mu, S, weight_bounds=(None, None))
new_ef.add_constraint(lambda w: w[0] + w[1] + w[2] + w[3] == 1)
weights = new_ef.max_sharpe()

# Clean the weights
cleaned_weights = new_ef.clean_weights()
print(cleaned_weights)

# Use the new_ef instance to calculate portfolio performance
new_ef.portfolio_performance(verbose=True)

mu = expected_returns.mean_historical_return(df)
S = risk_models.sample_cov(df)

ef = EfficientFrontier(mu, S, weight_bounds=(None, None))
ef.add_constraint(lambda w: w[0] + w[1] + w[2] + w[3] == 1)

fig, ax = plt.subplots()
plotting.plot_efficient_frontier(ef, ax=ax, show_assets=False)  

# Create a new instance of EfficientFrontier for maximizing the Sharpe ratio
ef_max_sharpe = EfficientFrontier(mu, S, weight_bounds=(None, None))
ef_max_sharpe.add_constraint(lambda w: w[0] + w[1] + w[2] + w[3] == 1)
ef_max_sharpe.max_sharpe()

# Get portfolio performance after maximizing the Sharpe ratio
ret_tangent, std_tangent, _ = ef_max_sharpe.portfolio_performance()

ax.scatter(std_tangent, ret_tangent, marker="*", s=100, c="r", label="Max Sharpe")

n_samples = 10000
w = np.random.dirichlet(np.ones(len(mu)), n_samples)
rets = w.dot(mu)
stds = np.sqrt(np.diag(w @ S @ w.T))
sharpes = rets / stds
ax.scatter(stds, rets, marker=".", c=sharpes, cmap="viridis_r")

ax.set_title("Efficient Frontier with random portfolios")
ax.legend()
plt.tight_layout()
plt.savefig("ef_scatter.png", dpi=200)
plt.show()
